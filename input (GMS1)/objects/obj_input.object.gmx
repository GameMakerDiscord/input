<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum E_INPUT { UP,
               DOWN,
               LEFT,
               RIGHT,
               JUMP, //Add your own enum element to add another input slot
               __SIZE }

enum E_STATE { PRESSED, ON, RELEASED,                    //Simple behaviours
               REPEATED, LONG, DOUBLE,                   //Advanced behaviours
               PRESSED_TIME, PRESSED_INDEX, REPEAT_TIME, //Timers
               NEW_ON, NEW_PRESSED_INDEX,                //Momentary states
               ANALOGUE,                                 //Get the analog value
               __SIZE }

//Millisecond delay times for advanced behaviours
repeat_delay = 280;
long_delay   = 400;
double_delay = 210;

//No device has been found yet. This variable is handled in "Async - System"
gamepad_device = -1;

//Initialise the input system
input_clear();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>input_refresh_begin();

//Note that we can stack many different inputs for the same input slot
//This system supports gamepad axis, gamepad button, keyboard button, and mouse button input

input_handle_gamepad_axis(   E_INPUT.UP   , gamepad_device, gp_axislv, -0.3 );
input_handle_gamepad_button( E_INPUT.UP   , gamepad_device, gp_padu );
input_handle_keyboard(       E_INPUT.UP   , vk_up, ord("W") );

input_handle_gamepad_axis(   E_INPUT.DOWN , gamepad_device, gp_axislv,  0.3 );
input_handle_gamepad_button( E_INPUT.DOWN , gamepad_device, gp_padd );
input_handle_keyboard(       E_INPUT.DOWN , vk_down, ord("S") );

input_handle_gamepad_axis(   E_INPUT.LEFT , gamepad_device, gp_axislh, -0.3 );
input_handle_gamepad_button( E_INPUT.LEFT , gamepad_device, gp_padl );
input_handle_keyboard(       E_INPUT.LEFT , vk_left, ord("A") );

input_handle_gamepad_axis(   E_INPUT.RIGHT, gamepad_device, gp_axislh,  0.3 );
input_handle_gamepad_button( E_INPUT.RIGHT, gamepad_device, gp_padr );
input_handle_keyboard(       E_INPUT.RIGHT, vk_right, ord("D") );

input_handle_gamepad_button( E_INPUT.JUMP , gamepad_device, gp_face1 );
input_handle_keyboard(       E_INPUT.JUMP , vk_space, vk_enter );
input_handle_mouse(          E_INPUT.JUMP , mb_left );

input_refresh_end(); //Actual state processing happens in this script

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( async_load[? "event_type" ] = "gamepad discovered" )
{
    //If a new controller has been connected...
    var _slot = async_load[? "pad_index" ];
    
    if ( gamepad_device &lt; 0 )
    {
        //If we're not already set a gamepad, don't bother showing the confirmation dialogue
        gamepad_device = _slot;
        input_clear(); //Always clear your input states when changing controllers
    }
    else if ( show_question( "A new gamepad in slot " + string( _slot ) + " has been found.##Would you like to swap to it?" ) )
    {
        //If the user has confirmed they want to change slot, do so!
        gamepad_device = _slot;
        input_clear(); //Always clear your input states when changing controllers
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Creator info
draw_text( 10, 10, "INPUT1.4##@jujuadams 2018/11/04" );

//Show what gamepad slot we're currently listening to
draw_text( 10, 100, "gamepad_device=" + string( gamepad_device ) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
